// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/ai_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "memos.api.v1";

export interface ChatRequest {
  message: string;
}

export interface ChatResponse {
  response: string;
}

function createBaseChatRequest(): ChatRequest {
  return { message: "" };
}

export const ChatRequest: MessageFns<ChatRequest> = {
  encode(message: ChatRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ChatRequest>): ChatRequest {
    return ChatRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatRequest>): ChatRequest {
    const message = createBaseChatRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseChatResponse(): ChatResponse {
  return { response: "" };
}

export const ChatResponse: MessageFns<ChatResponse> = {
  encode(message: ChatResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== "") {
      writer.uint32(10).string(message.response);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ChatResponse>): ChatResponse {
    return ChatResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatResponse>): ChatResponse {
    const message = createBaseChatResponse();
    message.response = object.response ?? "";
    return message;
  },
};

export type AiServiceDefinition = typeof AiServiceDefinition;
export const AiServiceDefinition = {
  name: "AiService",
  fullName: "memos.api.v1.AiService",
  methods: {
    chat: {
      name: "Chat",
      requestType: ChatRequest,
      requestStream: false,
      responseType: ChatResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([20, 58, 1, 42, 34, 15, 47, 97, 112, 105, 47, 118, 49, 47, 97, 105, 47, 99, 104, 97, 116]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
